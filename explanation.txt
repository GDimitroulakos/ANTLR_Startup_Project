
###################################################################################
#### g4 structure #################################################################
###################################################################################
	.___________________________________________________.
	|	grammar first;									|
	|													|
	|	/*												|
	|	 * Parser Rules									|
	|	 */												|
	|													|
	|	[ Parser Rules Here ]							|
	|													|
	|	/*												|
	|	 * Lexer Rules									|
	|	 */												|
	|													|
	|	[ Lexer Rules Here ]							|
	|													|
	|___________________________________________________|
	

###################################################################################
#### What files does g4 compilation creates? ######################################
###################################################################################
	._____________________________________________________________________________.
	|%grammar_Name%Lexer.cs														  |
	|	--------------------------------------------------------------------------|
	|	This is the lexer class													  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|#############################################################################|
	|																			  |
	|%grammar_Name%Parser.cs													  |
	|	--------------------------------------------------------------------------|
	|	his is the parser class													  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|#############################################################################|
	|																			  |
	|%grammar_Name%BaseVisitor.cs												  |
	|%grammar_Name%Visitor.cs													  |
	|	--------------------------------------------------------------------------|
	|	User Guide:																  |
	|		BaseVisitor class implements the abstract base class of nodes.		  |
	|		Visitor class implements the basic interface of nodes.				  |
	|																			  |
	|		Their difference is for security reasons etc.						  |
	|																			  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|#############################################################################|
	|																			  |
	|%grammar_Name%BaseListener.cs												  |
	|%grammar_Name%Listener.cs									  				  |
	|	--------------------------------------------------------------------------|
	|	We don't care about those files											  |
	|																			  |
	|	Their difference is for security reasons etc.							  |
	|	--------------------------------------------------------------------------|
	|_____________________________________________________________________________|

###################################################################################
#### What do i need to implement? #################################################
###################################################################################
	._____________________________________________________________________________.
	|%Concrete_Name%Generator.cs												  |
	|	--------------------------------------------------------------------------|
	|	There is where we have to overide all needed baseVisitor methods, in	  |
	|	order to achieve the desired functionality.								  |
	|																			  |
	|	A.K.A. How each type of node must behave, what type of data it holds etc. |
	|																			  |
	|	Every non-overiden function keeps the default/base functionality.		  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|%Concrete_Name%BaseVisitor.cs												  |
	|	--------------------------------------------------------------------------|
	|	Developer's Guide:														  |
	|		You have to implement a visitor class that has as many visit		  |
	|		methods, as the number of grammar entites that exist inside			  |
	|		your grammar. (see %Concrete_Name%Generator.cs)						  |
	|																			  |
	|		Every one of these methods has to be virtual, and their				  |
	|		implementation to consist of a basic functionality that fits		  |
	|		every eveloper's needs												  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|abstractBaseVisitor.cs												  |
	|	--------------------------------------------------------------------------|
	|	This class defines the primitive functionality of visitor.				  |
	|	--------------------------------------------------------------------------|
	|_____________________________________________________________________________|
###################################################################################
#### g4 structure #################################################################
###################################################################################
	.___________________________________________________.
	|	grammar first;									|
	|													|
	|	/*												|
	|	 * Parser Rules									|
	|	 */												|
	|													|
	|	[ Parser Rules Here ]							|
	|													|
	|	/*												|
	|	 * Lexer Rules									|
	|	 */												|
	|													|
	|	[ Lexer Rules Here ]							|
	|													|
	|___________________________________________________|
	

###################################################################################
#### What files does g4 compilation creates? ######################################
###################################################################################
	._____________________________________________________________________________.
	|%grammar_Name%Lexer.cs														  |
	|	--------------------------------------------------------------------------|
	|	This is the lexer class													  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|#############################################################################|
	|																			  |
	|%grammar_Name%Parser.cs													  |
	|	--------------------------------------------------------------------------|
	|	his is the parser class													  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|#############################################################################|
	|																			  |
	|%grammar_Name%BaseVisitor.cs												  |
	|%grammar_Name%Visitor.cs													  |
	|	--------------------------------------------------------------------------|
	|	User Guide:																  |
	|		BaseVisitor class implements the abstract base class of nodes.		  |
	|		Visitor class implements the basic interface of nodes.				  |
	|																			  |
	|		Their difference is for security reasons etc.						  |
	|																			  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|#############################################################################|
	|																			  |
	|%grammar_Name%BaseListener.cs												  |
	|%grammar_Name%Listener.cs									  				  |
	|	--------------------------------------------------------------------------|
	|	We don't care about those files											  |
	|																			  |
	|	Their difference is for security reasons etc.							  |
	|	--------------------------------------------------------------------------|
	|_____________________________________________________________________________|

###################################################################################
#### What do i need to implement? #################################################
###################################################################################
	._____________________________________________________________________________.
	|%Concrete_Name%Generator.cs												  |
	|	--------------------------------------------------------------------------|
	|	There is where we have to overide all needed baseVisitor methods, in	  |
	|	order to achieve the desired functionality.								  |
	|																			  |
	|	A.K.A. How each type of node must behave, what type of data it holds etc. |
	|																			  |
	|	Every non-overiden function keeps the default/base functionality.		  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|%Concrete_Name%BaseVisitor.cs												  |
	|	--------------------------------------------------------------------------|
	|	Developer's Guide:														  |
	|		You have to implement a visitor class that has as many visit		  |
	|		methods, as the number of grammar entites that exist inside			  |
	|		your grammar. (see %Concrete_Name%Generator.cs)						  |
	|																			  |
	|		Every one of these methods has to be virtual, and their				  |
	|		implementation to consist of a basic functionality that fits		  |
	|		every eveloper's needs												  |
	|	--------------------------------------------------------------------------|
	|																			  |
	|abstractBaseVisitor.cs														  |
	|	--------------------------------------------------------------------------|
	|	This class defines the primitive functionality of visitor.				  |
	|	--------------------------------------------------------------------------|
	|_____________________________________________________________________________|